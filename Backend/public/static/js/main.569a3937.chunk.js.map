{"version":3,"sources":["reducers/authReducer.js","reducers/rootReducers.js","store.js","PrivateWrapper.js","services/apis.js","services/httpCall.js","actions/authAction.js","Dashboard.js","LoginWrapper.js","LoginComponent.js","App.js","serviceWorker.js","index.js"],"names":["initialState","isLoggedIn","token","userdetails","combineReducers","Auth","state","action","type","payload","middleware","thunk","logger","store","createStore","rootReducer","applyMiddleware","connect","children","rest","console","log","render","to","pathname","apis","BASE_LOCAL_URL","BASE_SERVER_URL","GET_USER_DETAILS","LOGIN","REGISTER","http","axios","create","baseURL","login","defaults","headers","common","localStorage","setItem","logout","removeItem","setUserDetails","user","Dashboard","config","location","props","useState","overlayclicked","setoverlaystate","username","setusername","email","setemail","password","setpassword","view","setview","handleOverlay","submit","e","preventDefault","post","then","result","data","catch","err","className","id","onSubmit","href","placeholder","onChange","target","value","onClick","Token","getItem","Fragment","path","exact","Boolean","window","hostname","match","ReactDOM","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error","message"],"mappings":"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","file":"static/js/main.569a3937.chunk.js","sourcesContent":["const initialState = {\n    isLoggedIn : false,\n    token : null,\n    userdetails : null          \n}\n\nexport default (state = initialState, action )=>{\n    switch(action.type){\n        case 'LOGIN':\n            return {\n                ...state,\n                isLoggedIn : true,\n                token : action.token,\n                userdetails : action.userdetails\n            }\n        case 'LOGOUT':\n            return {\n                ...state,\n                isLoggedIn : false,\n                token : null,\n                userdetails : null\n            }\n        case 'SET_USER_DETAILS':\n            return{\n                ...state,\n                userdetails : action.payload\n            }\n        default:\n            return state;\n    }\n}","import { combineReducers } from 'redux'; \nimport Auth from \"./authReducer\";\n\nexport default combineReducers({\n    Auth\n});","import { createStore, applyMiddleware } from 'redux';\nimport thunk from 'redux-thunk';\nimport logger from \"redux-logger\";\nimport rootReducer from './reducers/rootReducers';\n\n\nconst initialState={};\nconst middleware=[thunk,logger];\n\n\nconst store = createStore(\n    rootReducer, \n    initialState, \n    applyMiddleware(...middleware)\n);\n\n\nexport default store;","import React from 'react';\nimport { Route, Redirect } from \"react-router-dom\";\nimport { connect } from 'react-redux';\n\n\nfunction PrivateRoute({ children,Auth, ...rest }) {\n    \n    console.log(Auth.isLoggedIn)\n    return (\n        <Route\n            {...rest}\n            render={() =>\n                Auth.isLoggedIn ? (\n                    children\n                ) : (\n                <Redirect\n                    to={{\n                        pathname: \"/\"\n                    }}\n                />\n                )\n            }\n        />\n    );\n}\n\nconst mapStateToProps = (state) => ({\n    Auth : state.Auth\n});\n\nexport default connect(mapStateToProps,{})(PrivateRoute);","const envoirnment = process.env.NODE_ENV;\nconst apis = {\n\n    BASE_LOCAL_URL : envoirnment === \"development\" ? \"http://localhost:3000\" : \"http://localhost:3000\",\n    BASE_SERVER_URL : envoirnment === \"development\"? \"http://localhost:7000\": \"http://localhost:7000\",\n\n    GET_USER_DETAILS:\"/apis/v1/userdetails\",\n    LOGIN : \"/api/login\",\n    REGISTER : \"/api/signup\",\n};\n\nexport default apis;","import axios from 'axios';\nimport apis from \"./apis\";\n\nconst http = axios.create({\n    baseURL: apis.BASE_SERVER_URL\n});\n\n\nexport default http;","import http from \"../services/httpCall\";\n\nexport const login = (token,userdetails) => {\n    http.defaults.headers.common['Authorization']='Bearer '+ token;\n    localStorage.setItem(\"Token\",token);\n    return {\n        type: 'LOGIN',\n        token : token,\n        userdetails:userdetails\n    };\n};\n\nexport const logout = () => {\n    localStorage.removeItem(\"Token\");\n    return {\n        type: 'LOGOUT'\n    };\n};\n\n  \nexport const setUserDetails = (user)=>{\n    return {\n        type : 'SET_USER_DETAILS',\n        payload : user\n    }\n}","import React from 'react'\n\nfunction Dashboard() {\n    return (\n        <div>\n            Dashboard\n        </div>\n    )\n}\n\nexport default Dashboard;\n","import React from 'react';\nimport {Redirect,Route} from 'react-router-dom';\nimport {connect} from \"react-redux\";\n\nfunction LoginWrapper({ children,Auth, ...rest }) {\n    console.log(rest.config)\n    return (\n        <Route\n        {...rest}\n        render={({ location }) =>\n            !Auth.isLoggedIn ? (\n            children\n            ) : (\n            <Redirect\n                to={{\n                pathname: \"/dashboard\"\n                }}\n            />\n            )\n        }\n        />\n    );\n}\n\nconst mapStateToProps = (state) => ({\n    Auth : state.Auth\n});\n\nexport default connect(mapStateToProps,{})(LoginWrapper);\n","import React,{useState} from 'react';\nimport {connect} from \"react-redux\";\nimport apis from \"./services/apis\";\nimport http from \"./services/httpCall\";\nimport {login,logout,setUserDetails} from \"./actions/authAction\";\nimport './LoginComponent.css';\n\n\nfunction LoginComponent(props) {\n    let [overlayclicked,setoverlaystate] = useState(false);\n    let [username,setusername] = useState(\"\");\n    let [email,setemail] = useState(\"\");\n    let [password,setpassword] = useState(\"\");\n    let [view,setview] = useState(\"login\");\n\n    let handleOverlay = ()=>{\n        setoverlaystate(!overlayclicked);\n    }\n\n    let submit =(e)=>{\n        e.preventDefault();\n\n        // console.log(view)\n        if(view===\"login\"){\n            // Login code\n            http.post(apis.LOGIN,{\n                email: email,\n                password: password\n            }).then((result)=>{\n                // console.log(result.data.token);\n                props.login(result.data.token);\n            })\n            .catch(err=>{\n                console.log(err);\n            })\n        }else{\n            // Sign up code\n            http.post(apis.REGISTER,{\n                username:username,\n                email: email,\n                password: password\n            }).then((result)=>{\n                console.log(result);\n            })\n            .catch(err=>{\n                console.log(err);\n            })\n        }\n    }\n\n    return (\n        <div className=\"container-wrapper\">\n            <div className={`container ${overlayclicked?\"right-active-panel\":\"\"}`} id=\"container\">\n                <div className=\"form-container sign-up-container\">\n            <form onSubmit={submit}>\n                <h1>Create Account</h1>\n                <div className=\"social-container\">\n                    <a href=\"/\" className=\"social\"><i className=\"fab fa-facebook-f\"></i></a>\n                    <a href=\"/\" className=\"social\"><i className=\"fab fa-google-plus-g\"></i></a>\n                    <a href=\"/\" className=\"social\"><i className=\"fab fa-linkedin-in\"></i></a>\n                </div>\n                <span>or use your email for registration</span>\n                <input type=\"text\" placeholder=\"Name\" onChange={(e)=>{setusername(e.target.value)}}/>\n                <input type=\"email\" placeholder=\"Email\" onChange={(e)=>{setemail(e.target.value)}}/>\n                <input type=\"password\" placeholder=\"Password\" onChange={(e)=>{setpassword(e.target.value)}}/>\n                <button onClick={()=>{setview(\"signup\")}}>Sign Up</button>\n            </form>\n        </div>\n                <div className=\"form-container sign-in-container\">\n            <form onSubmit={submit}>\n                <h1>Sign in</h1>\n                <div className=\"social-container\">\n                    <a href=\"/\" className=\"social\"><i className=\"fab fa-facebook-f\"></i></a>\n                    <a href=\"/\" className=\"social\"><i className=\"fab fa-google-plus-g\"></i></a>\n                    <a href=\"/\" className=\"social\"><i className=\"fab fa-linkedin-in\"></i></a>\n                </div>\n                <span>or use your account</span>\n                <input type=\"email\" placeholder=\"Email\" onChange={(e)=>{setemail(e.target.value)}}/>\n                <input type=\"password\" placeholder=\"Password\" onChange={(e)=>{setpassword(e.target.value)}}/>\n                <a href=\"/\">Forgot your password?</a>\n                <button onClick={()=>{setview(\"login\")}}>Sign In</button>\n            </form>\n        </div>\n                <div className=\"overlay-container\">\n            <div className=\"overlay\">\n                <div className=\"overlay-panel overlay-left\">\n                    <h1>Welcome Back!</h1>\n                    <p>To keep connected with us please login with your personal info</p>\n                    <button className=\"ghost\" id=\"signIn\" onClick={handleOverlay}>Sign In</button>\n                </div>\n                <div className=\"overlay-panel overlay-right\">\n                    <h1>Hello, Friend!</h1>\n                    <p>Enter your personal details and start journey with us</p>\n                    <button className=\"ghost\" id=\"signUp\" onClick={handleOverlay}>Sign Up</button>\n                </div>\n            </div>\n        </div>\n        </div>\n        </div>\n    )\n}\n\nconst mapStateToProps = (state) => {\n    return {\n        Auth: state.Auth\n    }\n}\n\nexport default connect(mapStateToProps, {\n    login,\n    logout,\n    setUserDetails\n  })(LoginComponent);\n","import React from 'react';\nimport {connect} from 'react-redux';\nimport { BrowserRouter, Switch } from \"react-router-dom\";\n// import http from \"./services/httpCall\"\n// import apis from \"./services/apis\"\nimport PrivateRoute from \"./PrivateWrapper\";\nimport {login,logout,setUserDetails} from \"./actions/authAction\";\nimport Dashboard from \"./Dashboard\";\nimport LoginWrapper from \"./LoginWrapper\";\nimport LoginComponent from \"./LoginComponent\";\nimport './App.css';\n\nfunction App(props) {\n\n  //auth check if token exist\n  let Token  = localStorage.getItem(\"Token\");\n  // console.log(Token);\n  if(Token && Token!==\"null\" && Token!==\"undefined\"){\n    props.login(Token);\n  }\n\n  return (\n    <React.Fragment>\n      <BrowserRouter>\n        <Switch>\n          <LoginWrapper path=\"/\" exact={true}>\n            <LoginComponent />\n          </LoginWrapper>\n          <PrivateRoute path=\"/dashboard\" exact={true}>\n            <Dashboard />\n          </PrivateRoute>\n        </Switch>\n      </BrowserRouter>\n    </React.Fragment>\n  );\n}\n\nconst mapStateToProps= (state) => {\n  \n}\n\nexport default connect(mapStateToProps, {\n  login,\n  logout,\n  setUserDetails\n})(App);\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport {Provider} from 'react-redux';\nimport store from './store';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>\n  ,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}